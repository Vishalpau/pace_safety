(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{"0bf1468f14a933f1ad60":function(e,o,i){"use strict";i.r(o);i("8af190b70a6bc55c6f1b");var n,t=i("0d7f0986bcd2f33d8a2a"),d=i("1037a6e0d5914309f74c"),r=i.n(d),a=i("fd107da5869b7ae197ce"),s=i.n(a),c=i("4dd2a92e69dcbe1bab10"),m=i("188313d2a36e593a5011");function l(e,o,i,t){n||(n="function"===typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var d=e&&e.defaultProps,r=arguments.length-3;if(o||0===r||(o={children:void 0}),1===r)o.children=t;else if(r>1){for(var a=new Array(r),s=0;s<r;s++)a[s]=arguments[s+3];o.children=a}if(o&&d)for(var c in d)void 0===o[c]&&(o[c]=d[c]);else o||(o=d||{});return{$$typeof:n,type:e,key:void 0===i?null:""+i,ref:null,props:o,_owner:null}}var p=l(m.j,{}),h=l(m.m,{}),u=l(s.a,{source:"\n | innerWidth  |xs | sm  | md  | lg  | xl  |\n |--------|-----|----|----|----|----|----|\n | width  |   xs   |   sm   |   md   |   lg   |   xl |\n | smUp   |   show | hide  |\n | mdDown |        |       |     hide | show |\n"}),v=l(m.b,{}),b=l(m.c,{});o.default=function(){var e=r.a.name+" - Layout",o=r.a.desc,i="containers/Layouts/demos/";return l("div",{},void 0,l(t.Helmet,{},void 0,l("title",{},void 0,e),l("meta",{name:"description",content:o}),l("meta",{property:"og:title",content:e}),l("meta",{property:"og:description",content:o}),l("meta",{property:"twitter:title",content:e}),l("meta",{property:"twitter:description",content:o})),l(c.mb,{title:"Media Queries",icon:"ion-ios-phone-portrait",desc:"CSS media queries is the idiomatic approach to make your UI responsive.. We provide some CSS-in-JS helpers to do so. In the following demo, we change the background color (red, blue & green) based on the screen width."},void 0,l("div",{},void 0,p,l(c.Rb,{componentName:i+"MediaQueries.js"}))),l(c.mb,{title:"With Width",icon:"ion-ios-phone-landscape",desc:"Sometimes, using CSS isn't enough. You might want to change the React rendering tree based on the breakpoint value, in JavaScript. We provide a withWidth() higher-order component for this use case. In the following demo, we change the rendered DOM element (em, u, del & span) based on the screen width."},void 0,l("div",{},void 0,h,l(c.Rb,{componentName:i+"WIthWIdth.js"}))),l(c.mb,{overflowX:!0,title:"Hidden",icon:"ion-ios-eye-outline",desc:"Hidden works with a range of breakpoints e.g. xsUp or mdDown, or one or more breakpoints e.g. only='sm' or only={['md', 'xl']}. Ranges and individual breakpoints can be used simultaneously to achieve very customized behavior. The ranges are inclusive of the specified breakpoints."},void 0,l("div",{},void 0,u,v,l(c.Rb,{componentName:i+"Breakpoint.js"}))),l(c.mb,{title:"Integration with Grid",icon:"ion-ios-grid",desc:"It is quite common to alter Grid at different responsive breakpoints, and in many cases, you want to hide some of those elements."},void 0,l("div",{},void 0,b,l(c.Rb,{componentName:i+"BreakpointGrid.js"}))))}}}]);